#!/bin/bash

unset answer i version installedver latestver pkg desc version remove

srcdir=~/.cache/aurget # directory for cloned repos
cfgdir=~/.local/share/aurget
pkgfile=$cfgdir/aurgetpkgs # list of installed packages
aurpkgs=$(cat $pkgfile | sed "s/\s.*//")
pkgcount=$(echo "$aurpkgs" | wc -w)

answeryes () {
    if [[ ${answer^^} == "YES" ]] || [[ ${answer^^} == "Y" ]] || [[ $answer == "" ]]; then
        return 0
    else
        return 1
    fi
}

installpkg () {
    version=$(grep pkgver $srcdir/"$1"/.SRCINFO | sed "s/pkgver =//; s/\t//g; s/ //g")
    (
    cd $srcdir/"$1" || exit
    makepkg -si # build package
    )
    sed -i "/$1/d" $pkgfile # remove old listing from file
    echo "$1 $version" >> $pkgfile # add to list of installed packages
    printf "%s installed successfully!\n" "$1"
}

packageexists () {
    status=$(curl -s --head -w %{http_code} https://aur.archlinux.org/cgit/aur.git/tree/.SRCINFO?h="$1" -o /dev/null)
    if [[ $status == 200 ]]; then
        return 0
    else
        return 1
    fi
}

installall () {
    for ((i=1; i<=$#; i++)); do
        if packageexists "${!i}"; then
            if grep -q ${!i} $pkgfile; then
                printf "%s is already installed, do you want to update it? (Y/n) " "${!i}"
                read -r answer
                if answeryes; then
                    if [[ -d "$srcdir"/"${!i}" ]]; then
                        rm -rf "${srcdir:?}/"${!i}
                    fi
                    git clone -q https://aur.archlinux.org/${!i}.git $srcdir/${!i}
                    printf "Repo updated! Installing package...\n"
                    installpkg "${!i}"
                else
                    printf "Not reinstalling %s.\n" "${!i}"
                fi
            else
                printf "Installing %s...\n" "${!i}"
                git clone -q https://aur.archlinux.org/${!i}.git $srcdir/${!i}
                installpkg "${!i}"
            fi
        else
            printf "Package %s does not exist.\n" "${!i}"
        fi
    done
}

removeall () {
    for ((i=1; i<=$#; i++)); do
        if grep -q ${!i} $pkgfile; then # determine if package is in list
            sudo pacman -R ${!i}
            sed -i "/${!i}/d" $pkgfile # remove from package list
            if [[ -d $srcdir/${!i} ]]; then
                clean "${!i}"
            fi
            printf "Package %s removed!\n" "${!i}"
        else
            printf "Package %s does not exist.\n" "${!i}"
        fi
    done
}

purgeall () {
    for ((i=1; i<=$#; i++)); do
        if grep -q ${!i} $pkgfile; then
            sudo pacman -Rns ${!i}
            sed -i "/${!i}/d" $pkgfile
            if [[ -d $srcdir/${!i} ]]; then
                clean "${!i}"
            fi
            printf "Package %s removed!\n" "${!i}"
        else
            printf "Package %s does not exist.\n" "${!i}"
        fi
    done
}

updateall () {
    if [[ $# != 0 ]]; then
        usage
    else
        printf "Updating packages...\n"
        for ((i=0; i<pkgcount; i++)); do
            pkg=$(echo "$aurpkgs" | cut -d " " -f $((i+1)))
            latestver=$(curl -s https://aur.archlinux.org/cgit/aur.git/plain/.SRCINFO?h="$pkg" | grep pkgver | sed "s/pkgver =//; s/\t//g; s/ //g")
            installedver=$(grep "$pkg" $pkgfile | sed "s/$pkg //")
            if [[ "$installedver" == "$latestver" ]]; then
                printf "%s is up to date!\n" "$pkg"
            else
                printf "Updating %s from %s to %s.\n" "$pkg" "$installedver" "$latestver"
                rm -rf "${srcdir:?}/" "$pkg"
                git clone -q https://aur.archlinux.org/"$pkg".git "$srcdir"/"$pkg"
                installpkg "$pkg"
                printf "Updated from %s to %s\n" "$installedver" "$latestver"
            fi
        done
        printf "Update complete.\n"
    fi
}

versionall () {
    for ((i=1; i<=$#; i++)); do
        if grep -q ${!i} $pkgfile; then
            grep ${!i} $pkgfile
        else
            printf "Package %s does not exist.\n" "${!i}"
        fi
    done
}

search () {
    for ((i=1; i<=$#; i++)); do
        if packageexists "${!i}"; then
            curl -s https://aur.archlinux.org/cgit/aur.git/plain/.SRCINFO?h=${!i} -o $srcdir/pkginfo-${!i} # save .SRCINFO to a temporary file
            desc=$(grep pkgdesc $srcdir/pkginfo-${!i} | sed "s/\tpkgdesc = //")
            version=$(grep pkgver $srcdir/pkginfo-${!i} | sed "s/\tpkgver = //")
            rm $srcdir/pkginfo-${!i}
            if grep -q ${!i} $pkgfile; then
                printf "%s %s [INSTALLED]\n    $desc\n" "${!i}" "$version"
            else
                printf "%s %s [NOT INSTALLED]\n    $desc\n" "${!i}" "$version"
            fi
        else
            printf "No matches found for %s\n" "${!i}"
        fi
    done
}

clean () {
    if [[ $# == 0 ]]; then
        (
            cd $srcdir || exit
            rm -rf -- *
        )
        printf "Source repo(s) deleted.\n"
    else
        for ((i=1; i<=$#; i++)); do
            if [[ -d "$srcdir"/"${!i}" ]]; then
                (
                    cd $srcdir || exit
                    rm -rf ${!i}
                )
            else
                printf "Repo %s does not exist.\n" "${!i}"
                if [[ $# == 1 ]]; then
                    return 0
                fi
            fi
        done
        printf "Source repo(s) deleted.\n"
    fi
}

usage () {
    echo "Usage: aurget <option> [PACKAGE(S)]
    Options:
    --install, -i                   Install/individually upgrade packages
    --remove, -r                    Remove packages
    --purge, -p                     Purge packages
    --update, -u                    Upgrade all packages
    --version, -v                   See version of package
    --list -l,                      List all installed AUR packages
    --search, -s                    Search for package
    --clean -c                      Remove cloned repos
    --help, -h                      Help"
}

if [[ ! -d $srcdir ]]; then # if source directory doesn't exist, create it
    mkdir -p $srcdir
fi
if [[ ! -d $cfgdir ]]; then # if config directory and package file don't exist, create them
    mkdir -p $cfgdir
    touch $pkgfile
fi

case $1 in
    --install | -i) installall "${@:2}" && exit 0 ;;
    --remove | -r) removeall "${@:2}" && exit 0 ;;
    --purge | -p) purgeall "${@:2}" && exit 0 ;;
    --update | -u) updateall "${@:2}" && exit 0 ;;
    --version | -v) versionall "${@:2}" && exit 0 ;;
    --list | -l) cat $pkgfile && exit 0 ;;
    --search | -s) search "${@:2}" && exit 0 ;;
    --clean | -c) clean "${@:2}" && exit 0 ;;
    *) usage && exit 0 ;;
esac
